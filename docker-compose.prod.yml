version: '3.8'

services:  
  db:
    image: postgres:15-alpine
    container_name: uyren_postgres_prod
    env_file:
      - ./.env.prod
    volumes:
      - uyren_postgres_data:/var/lib/postgresql/data
    networks:
      - uyren_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: uyren_backend_prod
    env_file:
      - ./.env.prod
    environment:
      - WAIT_FOR_DB=true
      - RUN_MAKEMIGRATIONS=false
      - RUN_MIGRATIONS=true
      - RUN_COLLECTSTATIC=true
      - CREATE_SUPERUSER=false
      - LOAD_FIXTURES=false
    ports:
      - "8000:8000"
    volumes:
      - uyren_backend_static:/app/staticfiles
      - uyren_backend_media:/app/media
    depends_on:
      db:
        condition: service_healthy
    networks:
      - uyren_network
    restart: unless-stopped
    # command: ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "3", "config.wsgi:application"]
    command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]


  code-execution-service:
    build:
      context: ./code-execution-service
      dockerfile: Dockerfile.prod
    container_name: uyren_code_execution_prod
    env_file:
      - ./.env.prod
    environment:
      - REDIS_URL=${CODE_EXECUTION_REDIS_URL:-redis://redis:6379/1}
      - HOST=${CODE_EXECUTION_HOST:-0.0.0.0}
      - PORT=${CODE_EXECUTION_PORT:-8001}
      - DEBUG=${CODE_EXECUTION_DEBUG:-false}
    ports:
      - "${CODE_EXECUTION_PORT:-8001}:8001"
    volumes:
      - ./code-execution-service/service-account.json:/app/service-account.json
    depends_on:
      - redis
      - backend
    networks:
      - uyren_network
    restart: unless-stopped
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8001"]
  redis:
    image: redis:7-alpine
    container_name: uyren_redis_prod
    volumes:
      - uyren_redis_data:/data
    networks:
      - uyren_network
    restart: unless-stopped
  nginx:
    image: nginx:alpine
    container_name: uyren_nginx_prod
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - uyren_backend_static:/app/staticfiles:ro
      - uyren_backend_media:/app/media:ro
    depends_on:
      - backend
    networks:
      - uyren_network
    restart: unless-stopped

volumes:
  uyren_postgres_data:
  uyren_backend_static:
  uyren_backend_media:
  uyren_redis_data:

networks:
  uyren_network:
    driver: bridge
